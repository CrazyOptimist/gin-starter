definitions:
  auth.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: number
      refreshToken:
        type: string
    type: object
  auth.LogoutDto:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  auth.RegisterDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      passwordConfirmation:
        type: string
    required:
    - email
    - password
    - passwordConfirmation
    type: object
  common.HttpError:
    properties:
      message:
        example: bad request
        type: string
      statusCode:
        example: 400
        type: integer
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      updatedAt:
        type: string
    type: object
  user.CreateUserDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    required:
    - email
    type: object
  user.UpdateUserDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      parameters:
      - description: LoginDto
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.HttpError'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Logout user (Invalidates refresh token)
      tags:
      - auth
  /auth/refresh:
    post:
      parameters:
      - description: TokenRefresh DTO
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LogoutDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      summary: Refresh tokens and invalidate the previous refresh token
      tags:
      - auth
  /auth/register:
    post:
      parameters:
      - description: RegisterDto
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      summary: Register new user
      tags:
      - auth
  /users:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Retrieves users
      tags:
      - users
    post:
      parameters:
      - description: CreateUserDto
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Delete user
      tags:
      - users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Retrieves a user by ID
      tags:
      - users
    patch:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateUserDto
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Update user
      tags:
      - users
  /users/me:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HttpError'
      security:
      - JWT: []
      summary: Get my profile
      tags:
      - users
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
